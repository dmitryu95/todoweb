{"ast":null,"code":"import { action, makeObservable, observable } from \"mobx\";\nimport { Network } from \"../components/Network\";\nimport { StoreTodo } from \"./NoteStore\";\n\nclass AuthStore {\n  constructor() {\n    this.email = \"\";\n    this.password = \"\";\n    this.response = \"\";\n    this.token = \"\";\n    this.id = \"\";\n    makeObservable(this, {\n      response: observable,\n      email: observable,\n      password: observable,\n      token: observable,\n      id: observable,\n      setEmail: action.bound,\n      setPassword: action.bound,\n      delEmail: action.bound,\n      delPassword: action.bound,\n      sendAuthDate: action.bound\n    });\n  }\n\n  setEmail(e) {\n    this.email = e.target.value;\n    console.log(\"email\", this.email);\n  }\n\n  setPassword(e) {\n    this.password = e.target.value;\n    console.log(\"password\", this.password);\n  }\n\n  delEmail() {\n    this.email = \"\";\n  }\n\n  delPassword() {\n    this.password = \"\";\n  }\n\n  delToken() {\n    this.token = \"\";\n  }\n\n  async sendAuthDate(url, method, status) {\n    if (this.email && this.password !== \"\") {\n      try {\n        let response = await Network(url, \" \", method, {\n          email: this.email,\n          password: this.password\n        });\n\n        if (response.id) {\n          if (status = \"registration\") {\n            let response = await Network(\"Users/login\", \" \", \"POST\", {\n              email: this.email,\n              password: this.password\n            });\n          }\n\n          this.response = response;\n          this.token = response.id;\n          this.id = response.userId;\n          StoreTodo.setListOfItems();\n          alert(\"Пользователь авторизован: \" + this.id);\n          this.delEmail();\n          this.delPassword();\n          return true;\n        } else {\n          alert(\"Ошибка, попробуте ввести повторно данные\");\n          return false;\n        }\n      } catch (err) {\n        console.log(err);\n        return false;\n      }\n    }\n\n    if (url == \"Users/logout?\") {\n      Network(url, \"access_token=\" + this.token, method);\n      this.delToken();\n    }\n\n    return false;\n  }\n\n}\n\nexport const store = new AuthStore();","map":{"version":3,"sources":["/Users/dmitriyu/Documents/todoweb/src/source/stores/AuthStore.js"],"names":["action","makeObservable","observable","Network","StoreTodo","AuthStore","constructor","email","password","response","token","id","setEmail","bound","setPassword","delEmail","delPassword","sendAuthDate","e","target","value","console","log","delToken","url","method","status","userId","setListOfItems","alert","err","store"],"mappings":"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","sourcesContent":["import { action, makeObservable, observable } from \"mobx\";\nimport { Network } from \"../components/Network\";\nimport { StoreTodo } from \"./NoteStore\";\n\nclass AuthStore {\n  constructor() {\n    this.email = \"\";\n    this.password = \"\";\n    this.response = \"\";\n    this.token = \"\";\n    this.id = \"\";\n    makeObservable(this, {\n      response: observable,\n      email: observable,\n      password: observable,\n      token: observable,\n      id: observable,\n      setEmail: action.bound,\n      setPassword: action.bound,\n      delEmail: action.bound,\n      delPassword: action.bound,\n      sendAuthDate: action.bound,\n    });\n  }\n\n  setEmail(e) {\n    this.email = e.target.value;\n    console.log(\"email\", this.email);\n  }\n\n  setPassword(e) {\n    this.password = e.target.value;\n    console.log(\"password\", this.password);\n  }\n\n  delEmail() {\n    this.email = \"\";\n  }\n\n  delPassword() {\n    this.password = \"\";\n  }\n\n  delToken() {\n    this.token = \"\";\n  }\n\n  async sendAuthDate(url, method, status) {\n    if (this.email && this.password !== \"\") {\n\t\ttry {\n\t\t\tlet response = await Network(url, \" \", method, {\n\t\t\t\temail: this.email,\n\t\t\t\tpassword: this.password,\n\t\t\t});\n\t\t\tif (response.id) {\n\t\t\t\tif (status = \"registration\") {\n\t\t\t\t\tlet response = await Network(\"Users/login\", \" \", \"POST\", {\n\t\t\t\t\t\temail: this.email,\n\t\t\t\t\t\tpassword: this.password,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tthis.response = response;\n\t\t\t\tthis.token = response.id;\n\t\t\t\tthis.id = response.userId;\n\t\t\t\tStoreTodo.setListOfItems();\n\t\t\t\talert(\"Пользователь авторизован: \" + this.id);\n\t\t\t\tthis.delEmail();\n\t\t\t\tthis.delPassword();\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\talert(\"Ошибка, попробуте ввести повторно данные\");\n\t\t\t\treturn false;\n\t\t\t}\n      \t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t\treturn false;\n      \t}\n    }\n    if (url == \"Users/logout?\") {\n      \tNetwork(url, \"access_token=\" + this.token, method);\n\t\tthis.delToken()\n    }\n    return false;\n  }\n}\n\nexport const store = new AuthStore();\n"]},"metadata":{},"sourceType":"module"}
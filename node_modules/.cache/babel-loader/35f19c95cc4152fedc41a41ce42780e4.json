{"ast":null,"code":"import { action, makeObservable, observable } from 'mobx';\n\nclass AuthStore {\n  constructor() {\n    this.email = '', this.password = '', this.response = '', makeObservable(this, {\n      response: observable,\n      email: observable,\n      password: observable,\n      setEmail: action.bound,\n      setPassword: action.bound,\n      delEmail: action.bound,\n      delPassword: action.bound,\n      sendAuthDate: action.bound\n    });\n  }\n\n  setEmail(e) {\n    this.email = e.target.value;\n    console.log(this.email);\n  }\n\n  setPassword(e) {\n    this.password = e.target.value;\n    console.log(this.email);\n  }\n\n  delEmail() {\n    this.email = \"\";\n  }\n\n  delPassword() {\n    this.password = \"\";\n  }\n\n  sendAuthDate(url, method, page) {\n    if (this.email && this.password !== '') {\n      try {\n        Network(url, ' ', method, {\n          email: this.email,\n          password: this.password\n        }).then(response => {\n          if (response.id) {\n            this.response = response.id;\n            Alert(\"Пользователь авторизован:\" + this.response);\n            StoreToDo.id = this.response; // Временно убираем проверку\n            // if (this.response !== '') navigation.navigate(page);\n          } else Alert(\"Ошибка, возможно пользователь не существует\");\n        });\n      } catch (error) {\n        console.log('error', error);\n      }\n    } else Alert(\"Заполните все поля\");\n\n    this.delPassword();\n  }\n\n}\n\nexport const store = new AuthStore();","map":{"version":3,"sources":["/Users/dmitriyu/Documents/todoweb/src/source/stores/AuthStore.js"],"names":["action","makeObservable","observable","AuthStore","constructor","email","password","response","setEmail","bound","setPassword","delEmail","delPassword","sendAuthDate","e","target","value","console","log","url","method","page","Network","then","id","Alert","StoreToDo","error","store"],"mappings":"AAAA,SAAQA,MAAR,EAAgBC,cAAhB,EAAgCC,UAAhC,QAAiD,MAAjD;;AAEA,MAAMC,SAAN,CAAgB;AACZC,EAAAA,WAAW,GAAG;AACT,SAAKC,KAAL,GAAa,EAAd,EACC,KAAKC,QAAL,GAAgB,EADjB,EAEC,KAAKC,QAAL,GAAiB,EAFlB,EAGIN,cAAc,CAAC,IAAD,EAAO;AACjBM,MAAAA,QAAQ,EAAEL,UADO;AAEjBG,MAAAA,KAAK,EAAEH,UAFU;AAGjBI,MAAAA,QAAQ,EAAEJ,UAHO;AAIjBM,MAAAA,QAAQ,EAAER,MAAM,CAACS,KAJA;AAKjBC,MAAAA,WAAW,EAAEV,MAAM,CAACS,KALH;AAMjBE,MAAAA,QAAQ,EAAEX,MAAM,CAACS,KANA;AAOjBG,MAAAA,WAAW,EAAEZ,MAAM,CAACS,KAPH;AAQjBI,MAAAA,YAAY,EAAEb,MAAM,CAACS;AARJ,KAAP,CAHlB;AAaH;;AAEDD,EAAAA,QAAQ,CAACM,CAAD,EAAI;AACR,SAAKT,KAAL,GAAaS,CAAC,CAACC,MAAF,CAASC,KAAtB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKb,KAAjB;AACH;;AAEDK,EAAAA,WAAW,CAACI,CAAD,EAAI;AACX,SAAKR,QAAL,GAAgBQ,CAAC,CAACC,MAAF,CAASC,KAAzB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKb,KAAjB;AACH;;AAEDM,EAAAA,QAAQ,GAAG;AACP,SAAKN,KAAL,GAAa,EAAb;AACH;;AAEDO,EAAAA,WAAW,GAAG;AACV,SAAKN,QAAL,GAAgB,EAAhB;AACH;;AAEDO,EAAAA,YAAY,CAACM,GAAD,EAAMC,MAAN,EAAcC,IAAd,EAAoB;AAC5B,QAAG,KAAKhB,KAAL,IAAc,KAAKC,QAAL,KAAiB,EAAlC,EAAsC;AAClC,UAAI;AACAgB,QAAAA,OAAO,CAACH,GAAD,EAAK,GAAL,EAAUC,MAAV,EAAkB;AACvBf,UAAAA,KAAK,EAAE,KAAKA,KADW;AAEvBC,UAAAA,QAAQ,EAAE,KAAKA;AAFQ,SAAlB,CAAP,CAGGiB,IAHH,CAGQhB,QAAQ,IAAI;AAClB,cAAIA,QAAQ,CAACiB,EAAb,EAAiB;AACf,iBAAKjB,QAAL,GAAgBA,QAAQ,CAACiB,EAAzB;AACAC,YAAAA,KAAK,CAAC,8BAA8B,KAAKlB,QAApC,CAAL;AACAmB,YAAAA,SAAS,CAACF,EAAV,GAAe,KAAKjB,QAApB,CAHe,CAIf;AACA;AACD,WAND,MAOEkB,KAAK,CAAC,6CAAD,CAAL;AACH,SAZD;AAaD,OAdH,CAcI,OAAOE,KAAP,EAAc;AACdV,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBS,KAArB;AACD;AACN,KAlBD,MAkBOF,KAAK,CAAC,oBAAD,CAAL;;AACP,SAAKb,WAAL;AACH;;AAxDW;;AA2DhB,OAAO,MAAMgB,KAAK,GAAG,IAAIzB,SAAJ,EAAd","sourcesContent":["import {action, makeObservable, observable} from 'mobx';\n\nclass AuthStore {\n    constructor() {\n        (this.email = ''),\n        (this.password = ''),\n        (this.response =  ''),\n            makeObservable(this, {\n                response: observable,\n                email: observable,\n                password: observable,\n                setEmail: action.bound,\n                setPassword: action.bound,\n                delEmail: action.bound,\n                delPassword: action.bound,\n                sendAuthDate: action.bound,\n            })\n    }\n\n    setEmail(e) {\n        this.email = e.target.value\n        console.log(this.email);\n    }\n\n    setPassword(e) {\n        this.password = e.target.value\n        console.log(this.email);\n    }\n\n    delEmail() {\n        this.email = \"\"\n    }\n\n    delPassword() {\n        this.password = \"\"\n    }\n\n    sendAuthDate(url, method, page) {\n        if(this.email && this.password !=='') {\n            try {\n                Network(url,' ', method, {\n                  email: this.email,\n                  password: this.password,\n                }).then(response => {\n                  if (response.id) {\n                    this.response = response.id;\n                    Alert(\"Пользователь авторизован:\" + this.response);\n                    StoreToDo.id = this.response;\n                    // Временно убираем проверку\n                    // if (this.response !== '') navigation.navigate(page);\n                  } else\n                    Alert(\"Ошибка, возможно пользователь не существует\");\n                });\n              } catch (error) {\n                console.log('error', error);\n              }\n        } else Alert(\"Заполните все поля\");\n        this.delPassword()\n    }\n}\n\nexport const store = new AuthStore();"]},"metadata":{},"sourceType":"module"}
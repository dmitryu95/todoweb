{"ast":null,"code":"import { Network } from \"../components/Network\";\nimport { action, makeObservable, observable } from 'mobx';\n\nclass NoteStore {\n  constructor() {\n    this.title = '';\n    this.id = 'OoD8JiQN0tLPxtwh059RBBUXB4dr8KDbPSlstO5VxKcJTV7Z1oUL935LwvXZ1yij';\n    this.listOfItems = [\"TEST\"];\n    this.statusItem = \"false\";\n    makeObservable(this, {\n      title: observable,\n      id: observable,\n      listOfItems: observable,\n      addNewNote: action.bound,\n      setTitle: action.bound,\n      setListOfItems: action.bound,\n      changeStatus: action.bound,\n      editItem: action.bound,\n      delete: action.bound\n    });\n  }\n\n  setListOfItems() {\n    Network('tasks?access_token=', this.id, 'GET').then(result => {\n      this.listOfItems = result;\n      console.log(\"проверка\", this.listOfItems.map(item => item.title));\n    });\n  }\n\n  setTitle(text) {\n    this.title = text.target.value;\n  }\n\n  addNewNote() {\n    console.log(\"содержание в поле title\", this.title);\n\n    if (!this.title || this.title == '' || this.title == ' ') {\n      // this.setListOfItems()\n      alert(\"Поле с заметкой пустое\");\n    } else {\n      Network('tasks?access_token=', this.id, 'POST', {\n        title: this.title\n      });\n      setTimeout(this.setListOfItems, 200);\n      this.title = '';\n    }\n  }\n\n  editItem(item) {\n    this.title = prompt(\"Edit Note\", item.title);\n    Network('tasks?access_token=', this.id, 'PUT', {\n      id: item.id,\n      title: this.title\n    });\n    setTimeout(this.setListOfItems, 200);\n    this.setListOfItems();\n    this.title = '';\n  }\n\n  delete(id) {\n    Network(`tasks/${id}?access_token=`, this.id, 'DELETE');\n    this.setListOfItems();\n  }\n\n}\n\nexport const StoreTodo = new NoteStore();","map":{"version":3,"sources":["/Users/dmitriyu/Documents/todoweb/src/source/stores/NoteStore.js"],"names":["Network","action","makeObservable","observable","NoteStore","constructor","title","id","listOfItems","statusItem","addNewNote","bound","setTitle","setListOfItems","changeStatus","editItem","delete","then","result","console","log","map","item","text","target","value","alert","setTimeout","prompt","StoreTodo"],"mappings":"AAAA,SAASA,OAAT,QAAwB,uBAAxB;AACA,SAAQC,MAAR,EAAgBC,cAAhB,EAAgCC,UAAhC,QAAiD,MAAjD;;AAEA,MAAMC,SAAN,CAAgB;AACZC,EAAAA,WAAW,GAAG;AACV,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,EAAL,GAAU,kEAAV;AACA,SAAKC,WAAL,GAAmB,CAAC,MAAD,CAAnB;AACA,SAAKC,UAAL,GAAkB,OAAlB;AAEIP,IAAAA,cAAc,CAAC,IAAD,EAAO;AACjBI,MAAAA,KAAK,EAAEH,UADU;AAEjBI,MAAAA,EAAE,EAAEJ,UAFa;AAGjBK,MAAAA,WAAW,EAAEL,UAHI;AAIjBO,MAAAA,UAAU,EAAET,MAAM,CAACU,KAJF;AAKjBC,MAAAA,QAAQ,EAAEX,MAAM,CAACU,KALA;AAMjBE,MAAAA,cAAc,EAAEZ,MAAM,CAACU,KANN;AAOjBG,MAAAA,YAAY,EAAEb,MAAM,CAACU,KAPJ;AAQjBI,MAAAA,QAAQ,EAAEd,MAAM,CAACU,KARA;AASjBK,MAAAA,MAAM,EAAEf,MAAM,CAACU;AATE,KAAP,CAAd;AAWP;;AAEDE,EAAAA,cAAc,GAAG;AACbb,IAAAA,OAAO,CAAC,qBAAD,EAAwB,KAAKO,EAA7B,EAAiC,KAAjC,CAAP,CACCU,IADD,CACMC,MAAM,IAAI;AACZ,WAAKV,WAAL,GAAmBU,MAAnB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwB,KAAKZ,WAAL,CAAiBa,GAAjB,CAAqBC,IAAI,IAAIA,IAAI,CAAChB,KAAlC,CAAxB;AACD,KAJH;AAKH;;AAEDM,EAAAA,QAAQ,CAACW,IAAD,EAAO;AACX,SAAKjB,KAAL,GAAaiB,IAAI,CAACC,MAAL,CAAYC,KAAzB;AACH;;AAEDf,EAAAA,UAAU,GAAG;AACTS,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuC,KAAKd,KAA5C;;AAEA,QAAG,CAAC,KAAKA,KAAN,IAAe,KAAKA,KAAL,IAAc,EAA7B,IAAmC,KAAKA,KAAL,IAAc,GAApD,EAAyD;AACrD;AACAoB,MAAAA,KAAK,CAAC,wBAAD,CAAL;AACH,KAHD,MAGO;AACH1B,MAAAA,OAAO,CAAC,qBAAD,EAAwB,KAAKO,EAA7B,EAAiC,MAAjC,EAAyC;AAACD,QAAAA,KAAK,EAAE,KAAKA;AAAb,OAAzC,CAAP;AACAqB,MAAAA,UAAU,CAAC,KAAKd,cAAN,EAAsB,GAAtB,CAAV;AACA,WAAKP,KAAL,GAAa,EAAb;AACH;AACJ;;AAEDS,EAAAA,QAAQ,CAACO,IAAD,EAAO;AACX,SAAKhB,KAAL,GAAasB,MAAM,CAAC,WAAD,EAAcN,IAAI,CAAChB,KAAnB,CAAnB;AACAN,IAAAA,OAAO,CAAC,qBAAD,EAAwB,KAAKO,EAA7B,EAAiC,KAAjC,EAAwC;AAC3CA,MAAAA,EAAE,EAAEe,IAAI,CAACf,EADkC;AAE3CD,MAAAA,KAAK,EAAE,KAAKA;AAF+B,KAAxC,CAAP;AAGAqB,IAAAA,UAAU,CAAC,KAAKd,cAAN,EAAsB,GAAtB,CAAV;AACA,SAAKA,cAAL;AACA,SAAKP,KAAL,GAAa,EAAb;AACH;;AAEDU,EAAAA,MAAM,CAACT,EAAD,EAAK;AACPP,IAAAA,OAAO,CAAE,SAAQO,EAAG,gBAAb,EAA8B,KAAKA,EAAnC,EAAuC,QAAvC,CAAP;AACA,SAAKM,cAAL;AACH;;AA1DW;;AA6DhB,OAAO,MAAMgB,SAAS,GAAG,IAAIzB,SAAJ,EAAlB","sourcesContent":["import { Network } from \"../components/Network\";\nimport {action, makeObservable, observable} from 'mobx';\n\nclass NoteStore {\n    constructor() {\n        this.title = '';\n        this.id = 'OoD8JiQN0tLPxtwh059RBBUXB4dr8KDbPSlstO5VxKcJTV7Z1oUL935LwvXZ1yij';\n        this.listOfItems = [\"TEST\"];\n        this.statusItem = \"false\"\n        \n            makeObservable(this, {\n                title: observable,\n                id: observable,\n                listOfItems: observable,\n                addNewNote: action.bound,\n                setTitle: action.bound, \n                setListOfItems: action.bound,\n                changeStatus: action.bound,\n                editItem: action.bound,\n                delete: action.bound,\n            })\n    }\n \n    setListOfItems() {\n        Network('tasks?access_token=', this.id, 'GET')\n        .then(result => {\n            this.listOfItems = result\n            console.log(\"проверка\", this.listOfItems.map(item => item.title));\n          })\n    }\n\n    setTitle(text) {\n        this.title = text.target.value; \n    }\n\n    addNewNote() {\n        console.log(\"содержание в поле title\", this.title);\n    \n        if(!this.title || this.title == '' || this.title == ' ') {\n            // this.setListOfItems()\n            alert(\"Поле с заметкой пустое\")\n        } else {\n            Network('tasks?access_token=', this.id, 'POST', {title: this.title});\n            setTimeout(this.setListOfItems, 200);\n            this.title = ''\n        }  \n    }\n\n    editItem(item) {\n        this.title = prompt(\"Edit Note\", item.title)\n        Network('tasks?access_token=', this.id, 'PUT', {\n            id: item.id,\n            title: this.title})\n        setTimeout(this.setListOfItems, 200);\n        this.setListOfItems();\n        this.title = ''\n    }\n\n    delete(id) {\n        Network(`tasks/${id}?access_token=`, this.id, 'DELETE');\n        this.setListOfItems()\n    }\n}\n\nexport const StoreTodo = new NoteStore();"]},"metadata":{},"sourceType":"module"}
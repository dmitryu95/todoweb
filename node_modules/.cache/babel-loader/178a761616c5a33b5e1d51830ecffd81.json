{"ast":null,"code":"import { Network } from \"../components/Network\";\nimport { action, makeObservable, observable } from 'mobx';\n\nclass NoteStore {\n  constructor() {\n    this.title = '';\n    this.id = sto;\n    this.listOfItems = [\"TEST\"];\n    this.statusItem = false;\n    makeObservable(this, {\n      title: observable,\n      id: observable,\n      statusItem: observable,\n      listOfItems: observable,\n      addNewNote: action.bound,\n      setTitle: action.bound,\n      setListOfItems: action.bound,\n      changeStatus: action.bound,\n      editItem: action.bound,\n      delete: action.bound\n    });\n  }\n\n  setListOfItems() {\n    Network('tasks?access_token=', this.id, 'GET').then(result => {\n      this.listOfItems = result;\n      console.log(\"проверка\", this.listOfItems.map(item => item.title));\n    });\n  }\n\n  setTitle(text) {\n    this.title = text.target.value;\n  }\n\n  addNewNote() {\n    console.log(\"содержание в поле title\", this.title);\n\n    if (!this.title || this.title == '' || this.title == ' ') {\n      // this.setListOfItems()\n      alert(\"Поле с заметкой пустое\");\n    } else {\n      Network('tasks?access_token=', this.id, 'POST', {\n        title: this.title\n      });\n      setTimeout(this.setListOfItems, 200);\n      this.title = '';\n    }\n  }\n\n  changeStatus(item) {\n    if (item.done == true) {\n      Network('tasks?access_token=', this.id, 'PUT', {\n        title: item.title,\n        id: item.id,\n        done: false\n      });\n    } else {\n      Network('tasks?access_token=', this.id, 'PUT', {\n        title: item.title,\n        id: item.id,\n        done: true\n      });\n    }\n\n    setTimeout(this.setListOfItems, 200);\n    this.setListOfItems();\n  }\n\n  editItem(item) {\n    this.title = prompt(\"Edit Note\", item.title);\n    Network('tasks?access_token=', this.id, 'PUT', {\n      id: item.id,\n      done: item.done,\n      title: this.title\n    });\n    setTimeout(this.setListOfItems, 200);\n    this.setListOfItems();\n    this.title = '';\n  }\n\n  delete(id) {\n    Network(`tasks/${id}?access_token=`, this.id, 'DELETE');\n    this.setListOfItems();\n  }\n\n}\n\nexport const StoreTodo = new NoteStore();","map":{"version":3,"sources":["/Users/dmitriyu/Documents/todoweb/src/source/stores/NoteStore.js"],"names":["Network","action","makeObservable","observable","NoteStore","constructor","title","id","sto","listOfItems","statusItem","addNewNote","bound","setTitle","setListOfItems","changeStatus","editItem","delete","then","result","console","log","map","item","text","target","value","alert","setTimeout","done","prompt","StoreTodo"],"mappings":"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","sourcesContent":["import { Network } from \"../components/Network\";\nimport {action, makeObservable, observable} from 'mobx';\n\nclass NoteStore {\n    constructor() {\n        this.title = '';\n        this.id = sto;\n        this.listOfItems = [\"TEST\"];\n        this.statusItem = false;\n        \n            makeObservable(this, {\n                title: observable,\n                id: observable,\n                statusItem: observable,\n                listOfItems: observable,\n                addNewNote: action.bound,\n                setTitle: action.bound, \n                setListOfItems: action.bound,\n                changeStatus: action.bound,\n                editItem: action.bound,\n                delete: action.bound,\n            })\n    }\n \n    setListOfItems() {\n        Network('tasks?access_token=', this.id, 'GET')\n        .then(result => {\n            this.listOfItems = result\n            console.log(\"проверка\", this.listOfItems.map(item => item.title));\n          })\n    }\n\n    setTitle(text) {\n        this.title = text.target.value; \n    }\n\n    addNewNote() {\n        console.log(\"содержание в поле title\", this.title);\n    \n        if(!this.title || this.title == '' || this.title == ' ') {\n            // this.setListOfItems()\n            alert(\"Поле с заметкой пустое\")\n        } else {\n            Network('tasks?access_token=', this.id, 'POST', {title: this.title});\n            setTimeout(this.setListOfItems, 200);\n            this.title = ''\n        }  \n    }\n\n    changeStatus(item) {\n        if(item.done == true) {\n            Network('tasks?access_token=', this.id, 'PUT', {\n                title: item.title,\n                id: item.id,\n                done: false\n            })\n        } else {\n            Network('tasks?access_token=', this.id, 'PUT', {\n                title: item.title,\n                id: item.id,\n                done: true\n            })\n        }\n        setTimeout(this.setListOfItems, 200);\n        this.setListOfItems();\n    }\n\n    editItem(item) {\n        this.title = prompt(\"Edit Note\", item.title)\n        Network('tasks?access_token=', this.id, 'PUT', {\n            id: item.id,\n            done: item.done,\n            title: this.title})\n        setTimeout(this.setListOfItems, 200);\n        this.setListOfItems();\n        this.title = ''\n    }\n\n    delete(id) {\n        Network(`tasks/${id}?access_token=`, this.id, 'DELETE');\n        this.setListOfItems()\n    }\n}\n\nexport const StoreTodo = new NoteStore();"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { action, makeObservable, observable } from 'mobx';\nimport { Network } from \"../components/Network\";\nimport { StoreTodo } from './NoteStore';\n\nclass AuthStore {\n  constructor() {\n    this.email = '';\n    this.password = '';\n    this.response = '';\n    this.id = '';\n    makeObservable(this, {\n      response: observable,\n      email: observable,\n      password: observable,\n      id: observable,\n      setEmail: action.bound,\n      setPassword: action.bound,\n      delEmail: action.bound,\n      delPassword: action.bound,\n      sendAuthDate: action.bound\n    });\n  }\n\n  setEmail(e) {\n    this.email = e.target.value;\n    console.log(\"email\", this.email);\n  }\n\n  setPassword(e) {\n    this.password = e.target.value;\n    console.log(\"password\", this.password);\n  }\n\n  delEmail() {\n    this.email = \"\";\n  }\n\n  delPassword() {\n    this.password = \"\";\n  }\n\n  sendAuthDate(url, method, page) {\n    console.log(url, \"url rbrtbrtb\");\n\n    if (this.email && this.password !== '') {\n      Network(url, ' ', method, {\n        email: this.email,\n        password: this.password\n      }).then(response => {\n        console.log(\"id1\", this.response);\n\n        if (response.id) {\n          this.id = response.id;\n          alert(\"Пользователь авторизован:\" + this.id);\n          console.log(\"id2\", this.id);\n        } else alert(\"Ошибка, попробуте ввести повторно данные\");\n      }).catch(err => console.log(err));\n    }\n\n    if (url == \"Users/logout?\") {\n      console.log(this.id, \"Idhaaaaaaaaaaa\");\n      Network(url, StoreTodo.id, method);\n    } else alert(\"Заполните все поля\");\n\n    this.delPassword();\n  }\n\n}\n\nexport const store = new AuthStore();","map":{"version":3,"sources":["/Users/dmitriyu/Documents/todoweb/src/source/stores/AuthStore.js"],"names":["action","makeObservable","observable","Network","StoreTodo","AuthStore","constructor","email","password","response","id","setEmail","bound","setPassword","delEmail","delPassword","sendAuthDate","e","target","value","console","log","url","method","page","then","alert","catch","err","store"],"mappings":"AAAA,SAAQA,MAAR,EAAgBC,cAAhB,EAAgCC,UAAhC,QAAiD,MAAjD;AACA,SAAQC,OAAR,QAAsB,uBAAtB;AACA,SAASC,SAAT,QAA0B,aAA1B;;AAEA,MAAMC,SAAN,CAAgB;AACZC,EAAAA,WAAW,GAAG;AACV,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,QAAL,GAAiB,EAAjB;AACA,SAAKC,EAAL,GAAU,EAAV;AACIT,IAAAA,cAAc,CAAC,IAAD,EAAO;AACjBQ,MAAAA,QAAQ,EAAEP,UADO;AAEjBK,MAAAA,KAAK,EAAEL,UAFU;AAGjBM,MAAAA,QAAQ,EAAEN,UAHO;AAIjBQ,MAAAA,EAAE,EAAER,UAJa;AAKjBS,MAAAA,QAAQ,EAAEX,MAAM,CAACY,KALA;AAMjBC,MAAAA,WAAW,EAAEb,MAAM,CAACY,KANH;AAOjBE,MAAAA,QAAQ,EAAEd,MAAM,CAACY,KAPA;AAQjBG,MAAAA,WAAW,EAAEf,MAAM,CAACY,KARH;AASjBI,MAAAA,YAAY,EAAEhB,MAAM,CAACY;AATJ,KAAP,CAAd;AAWP;;AAEDD,EAAAA,QAAQ,CAACM,CAAD,EAAI;AACR,SAAKV,KAAL,GAAaU,CAAC,CAACC,MAAF,CAASC,KAAtB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqB,KAAKd,KAA1B;AACH;;AAEDM,EAAAA,WAAW,CAACI,CAAD,EAAI;AACX,SAAKT,QAAL,GAAgBS,CAAC,CAACC,MAAF,CAASC,KAAzB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwB,KAAKb,QAA7B;AACH;;AAEDM,EAAAA,QAAQ,GAAG;AACP,SAAKP,KAAL,GAAa,EAAb;AACH;;AAEDQ,EAAAA,WAAW,GAAG;AACV,SAAKP,QAAL,GAAgB,EAAhB;AACH;;AAEDQ,EAAAA,YAAY,CAACM,GAAD,EAAMC,MAAN,EAAcC,IAAd,EAAoB;AAC5BJ,IAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ,EAAiB,cAAjB;;AAEA,QAAG,KAAKf,KAAL,IAAc,KAAKC,QAAL,KAAiB,EAAlC,EAAsC;AAC9BL,MAAAA,OAAO,CAACmB,GAAD,EAAK,GAAL,EAAUC,MAAV,EAAkB;AACvBhB,QAAAA,KAAK,EAAE,KAAKA,KADW;AAEvBC,QAAAA,QAAQ,EAAE,KAAKA;AAFQ,OAAlB,CAAP,CAGGiB,IAHH,CAGQhB,QAAQ,IAAI;AAChBW,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmB,KAAKZ,QAAxB;;AACF,YAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,eAAKA,EAAL,GAAUD,QAAQ,CAACC,EAAnB;AACAgB,UAAAA,KAAK,CAAC,8BAA8B,KAAKhB,EAApC,CAAL;AACAU,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmB,KAAKX,EAAxB;AACD,SAJD,MAIOgB,KAAK,CAAC,0CAAD,CAAL;AACR,OAVD,EAWCC,KAXD,CAWQC,GAAD,IAASR,OAAO,CAACC,GAAR,CAAYO,GAAZ,CAXhB;AAYH;;AACD,QAAGN,GAAG,IAAI,eAAV,EAA2B;AACvBF,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKX,EAAjB,EAAqB,gBAArB;AACAP,MAAAA,OAAO,CAACmB,GAAD,EAAMlB,SAAS,CAACM,EAAhB,EAAoBa,MAApB,CAAP;AACH,KAHD,MAICG,KAAK,CAAC,oBAAD,CAAL;;AACL,SAAKX,WAAL;AACH;;AA5DW;;AA+DhB,OAAO,MAAMc,KAAK,GAAG,IAAIxB,SAAJ,EAAd","sourcesContent":["import {action, makeObservable, observable} from 'mobx';\nimport {Network} from \"../components/Network\"\nimport { StoreTodo } from './NoteStore';\n\nclass AuthStore {\n    constructor() {\n        this.email = '';\n        this.password = '';\n        this.response =  '';\n        this.id = '';\n            makeObservable(this, {\n                response: observable,\n                email: observable,\n                password: observable,\n                id: observable,\n                setEmail: action.bound,\n                setPassword: action.bound,\n                delEmail: action.bound,\n                delPassword: action.bound,\n                sendAuthDate: action.bound,\n            })\n    }\n\n    setEmail(e) {\n        this.email = e.target.value\n        console.log(\"email\", this.email);\n    }\n\n    setPassword(e) {\n        this.password = e.target.value\n        console.log(\"password\", this.password);\n    }\n\n    delEmail() {\n        this.email = \"\"\n    }\n\n    delPassword() {\n        this.password = \"\"\n    }\n\n    sendAuthDate(url, method, page) {\n        console.log(url, \"url rbrtbrtb\");\n        \n        if(this.email && this.password !=='') {\n                Network(url,' ', method, {\n                  email: this.email,\n                  password: this.password,\n                }).then(response => {\n                    console.log(\"id1\", this.response);\n                  if (response.id) {\n                    this.id = response.id;\n                    alert(\"Пользователь авторизован:\" + this.id);\n                    console.log(\"id2\", this.id);\n                  } else alert(\"Ошибка, попробуте ввести повторно данные\");\n                })\n                .catch((err) => console.log(err))\n            }\n            if(url == \"Users/logout?\") {\n                console.log(this.id, \"Idhaaaaaaaaaaa\");\n                Network(url, StoreTodo.id, method)\n            }\n        else alert(\"Заполните все поля\");\n        this.delPassword()\n    }\n}\n\nexport const store = new AuthStore();"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { Network } from \"../components/Network\";\nimport { action, makeObservable, observable } from 'mobx';\n\nclass NoteStore {\n  constructor() {\n    this.title = '';\n    this.id = 'PzBEXwf47QMGQltedMfpUJ0F21PecGKFtgzsF0oF9oL9QXhVTXFD55ANx3P4iNQo';\n    this.listOfItems = [\"TEST\"];\n    makeObservable(this, {\n      title: observable,\n      id: observable,\n      listOfItems: observable,\n      addNewNote: action.bound,\n      setTitle: action.bound,\n      setListOfItems: action.bound,\n      delete: action.bound\n    });\n  }\n\n  setListOfItems() {\n    Network('tasks?access_token=', this.id, 'GET').then(result => {\n      this.listOfItems = result;\n      console.log(\"проверка\", this.listOfItems.map(item => item.title));\n    });\n  }\n\n  setTitle(text) {\n    console.log(text, \"Text\");\n\n    if (text !== \"\") {\n      this.title = text.target.value;\n    } else alert(\"Поле пустое \");\n  }\n\n  addNewNote() {\n    console.log(\"содержание в поле title\", this.title);\n\n    if (this.title == \"\") {\n      console.log(\"11111\");\n      this.setListOfItems();\n    } else {\n      console.log(\"содержание в поле title else\", this.title);\n      console.log(\"22222\");\n      Network('tasks?access_token=', this.id, 'POST', {\n        title: this.title\n      });\n      setTimeout(this.setListOfItems, 200);\n      this.title = ' ';\n    }\n  }\n\n  delete(id) {\n    Network(`tasks/${id}?access_token=`, this.id, 'DELETE');\n    this.setListOfItems();\n  }\n\n}\n\nexport const StoreTodo = new NoteStore();","map":{"version":3,"sources":["/Users/dmitriyu/Documents/todoweb/src/source/stores/NoteStore.js"],"names":["Network","action","makeObservable","observable","NoteStore","constructor","title","id","listOfItems","addNewNote","bound","setTitle","setListOfItems","delete","then","result","console","log","map","item","text","target","value","alert","setTimeout","StoreTodo"],"mappings":"AAAA,SAASA,OAAT,QAAwB,uBAAxB;AACA,SAAQC,MAAR,EAAgBC,cAAhB,EAAgCC,UAAhC,QAAiD,MAAjD;;AAEA,MAAMC,SAAN,CAAgB;AACZC,EAAAA,WAAW,GAAG;AACV,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,EAAL,GAAU,kEAAV;AACA,SAAKC,WAAL,GAAmB,CAAC,MAAD,CAAnB;AAEIN,IAAAA,cAAc,CAAC,IAAD,EAAO;AACjBI,MAAAA,KAAK,EAAEH,UADU;AAEjBI,MAAAA,EAAE,EAAEJ,UAFa;AAGjBK,MAAAA,WAAW,EAAEL,UAHI;AAIjBM,MAAAA,UAAU,EAAER,MAAM,CAACS,KAJF;AAKjBC,MAAAA,QAAQ,EAAEV,MAAM,CAACS,KALA;AAMjBE,MAAAA,cAAc,EAAEX,MAAM,CAACS,KANN;AAOjBG,MAAAA,MAAM,EAAEZ,MAAM,CAACS;AAPE,KAAP,CAAd;AASP;;AAEDE,EAAAA,cAAc,GAAG;AACbZ,IAAAA,OAAO,CAAC,qBAAD,EAAwB,KAAKO,EAA7B,EAAiC,KAAjC,CAAP,CACCO,IADD,CACMC,MAAM,IAAI;AACZ,WAAKP,WAAL,GAAmBO,MAAnB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwB,KAAKT,WAAL,CAAiBU,GAAjB,CAAqBC,IAAI,IAAIA,IAAI,CAACb,KAAlC,CAAxB;AACD,KAJH;AAKH;;AAEDK,EAAAA,QAAQ,CAACS,IAAD,EAAO;AACXJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,IAAZ,EAAkB,MAAlB;;AACA,QAAIA,IAAI,KAAK,EAAb,EAAiB;AACb,WAAKd,KAAL,GAAac,IAAI,CAACC,MAAL,CAAYC,KAAzB;AACH,KAFD,MAEQC,KAAK,CAAC,cAAD,CAAL;AACX;;AAEDd,EAAAA,UAAU,GAAG;AACTO,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuC,KAAKX,KAA5C;;AAEA,QAAG,KAAKA,KAAL,IAAc,EAAjB,EAAqB;AACjBU,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,WAAKL,cAAL;AAEH,KAJD,MAKK;AACDI,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4C,KAAKX,KAAjD;AACAU,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAjB,MAAAA,OAAO,CAAC,qBAAD,EAAwB,KAAKO,EAA7B,EAAiC,MAAjC,EAAyC;AAACD,QAAAA,KAAK,EAAE,KAAKA;AAAb,OAAzC,CAAP;AACAkB,MAAAA,UAAU,CAAC,KAAKZ,cAAN,EAAsB,GAAtB,CAAV;AACA,WAAKN,KAAL,GAAa,GAAb;AACH;AACJ;;AAEDO,EAAAA,MAAM,CAACN,EAAD,EAAK;AACPP,IAAAA,OAAO,CAAE,SAAQO,EAAG,gBAAb,EAA8B,KAAKA,EAAnC,EAAuC,QAAvC,CAAP;AACA,SAAKK,cAAL;AACH;;AApDW;;AAuDhB,OAAO,MAAMa,SAAS,GAAG,IAAIrB,SAAJ,EAAlB","sourcesContent":["import { Network } from \"../components/Network\";\nimport {action, makeObservable, observable} from 'mobx';\n\nclass NoteStore {\n    constructor() {\n        this.title = '';\n        this.id = 'PzBEXwf47QMGQltedMfpUJ0F21PecGKFtgzsF0oF9oL9QXhVTXFD55ANx3P4iNQo';\n        this.listOfItems = [\"TEST\"];\n        \n            makeObservable(this, {\n                title: observable,\n                id: observable,\n                listOfItems: observable,\n                addNewNote: action.bound,\n                setTitle: action.bound, \n                setListOfItems: action.bound,\n                delete: action.bound,\n            })\n    }\n \n    setListOfItems() {\n        Network('tasks?access_token=', this.id, 'GET')\n        .then(result => {\n            this.listOfItems = result\n            console.log(\"проверка\", this.listOfItems.map(item => item.title));\n          })\n    }\n\n    setTitle(text) {\n        console.log(text, \"Text\");\n        if( text !== \"\") {\n            this.title = text.target.value;\n        }  else alert(\"Поле пустое \");\n    }\n\n    addNewNote() {\n        console.log(\"содержание в поле title\", this.title);\n    \n        if(this.title == \"\") {\n            console.log(\"11111\")\n            this.setListOfItems()\n            \n        }\n        else {\n            console.log(\"содержание в поле title else\", this.title);\n            console.log(\"22222\")\n            Network('tasks?access_token=', this.id, 'POST', {title: this.title});\n            setTimeout(this.setListOfItems, 200);\n            this.title = ' '\n        }  \n    }\n\n    delete(id) {\n        Network(`tasks/${id}?access_token=`, this.id, 'DELETE');\n        this.setListOfItems()\n    }\n}\n\nexport const StoreTodo = new NoteStore();"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { action, makeObservable, observable } from 'mobx';\nimport { Network } from \"../components/Network\";\nimport { StoreTodo } from './NoteStore';\n\nclass AuthStore {\n  constructor() {\n    this.email = '';\n    this.password = '';\n    this.response = '';\n    this.token = '';\n    this.id = '';\n    makeObservable(this, {\n      response: observable,\n      email: observable,\n      password: observable,\n      token: observable,\n      id: observable,\n      setEmail: action.bound,\n      setPassword: action.bound,\n      delEmail: action.bound,\n      delPassword: action.bound,\n      sendAuthDate: action.bound\n    });\n  }\n\n  setEmail(e) {\n    this.email = e.target.value;\n    console.log(\"email\", this.email);\n  }\n\n  setPassword(e) {\n    this.password = e.target.value;\n    console.log(\"password\", this.password);\n  }\n\n  delEmail() {\n    this.email = \"\";\n  }\n\n  delPassword() {\n    this.password = \"\";\n  }\n\n  sendAuthDate(url, method, page) {\n    if (this.email && this.password !== '') {\n      Network(url, ' ', method, {\n        email: this.email,\n        password: this.password\n      }).then(response => {\n        if (response.id) {\n          this.response = response;\n          this.token = response.id;\n          this.id = response.userId;\n          StoreTodo.setListOfItems();\n          console.log(\"id1\", this.token);\n          alert(\"Пользователь авторизован: \" + this.id);\n        } else alert(\"Ошибка, попробуте ввести повторно данные\");\n      }).catch(err => console.log(err));\n    }\n\n    if (url == \"Users/logout?\") {\n      /* id захардкожен, нужно запилить навигацию, тогда будет ок */\n      Network(url, \"access_token=\" + this.token, method);\n    }\n\n    this.delEmail();\n    this.delPassword(); // else alert(\"Заполните все поля\");\n    // this.delPassword()\n  }\n\n}\n\nexport const store = new AuthStore();","map":{"version":3,"sources":["/Users/dmitriyu/Documents/todoweb/src/source/stores/AuthStore.js"],"names":["action","makeObservable","observable","Network","StoreTodo","AuthStore","constructor","email","password","response","token","id","setEmail","bound","setPassword","delEmail","delPassword","sendAuthDate","e","target","value","console","log","url","method","page","then","userId","setListOfItems","alert","catch","err","store"],"mappings":"AAAA,SAAQA,MAAR,EAAgBC,cAAhB,EAAgCC,UAAhC,QAAiD,MAAjD;AACA,SAAQC,OAAR,QAAsB,uBAAtB;AACA,SAASC,SAAT,QAA0B,aAA1B;;AAEA,MAAMC,SAAN,CAAgB;AACZC,EAAAA,WAAW,GAAG;AACV,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,QAAL,GAAiB,EAAjB;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,EAAL,GAAU,EAAV;AACIV,IAAAA,cAAc,CAAC,IAAD,EAAO;AACjBQ,MAAAA,QAAQ,EAAEP,UADO;AAEjBK,MAAAA,KAAK,EAAEL,UAFU;AAGjBM,MAAAA,QAAQ,EAAEN,UAHO;AAIjBQ,MAAAA,KAAK,EAAER,UAJU;AAKjBS,MAAAA,EAAE,EAAET,UALa;AAMjBU,MAAAA,QAAQ,EAAEZ,MAAM,CAACa,KANA;AAOjBC,MAAAA,WAAW,EAAEd,MAAM,CAACa,KAPH;AAQjBE,MAAAA,QAAQ,EAAEf,MAAM,CAACa,KARA;AASjBG,MAAAA,WAAW,EAAEhB,MAAM,CAACa,KATH;AAUjBI,MAAAA,YAAY,EAAEjB,MAAM,CAACa;AAVJ,KAAP,CAAd;AAYP;;AAEDD,EAAAA,QAAQ,CAACM,CAAD,EAAI;AACR,SAAKX,KAAL,GAAaW,CAAC,CAACC,MAAF,CAASC,KAAtB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqB,KAAKf,KAA1B;AACH;;AAEDO,EAAAA,WAAW,CAACI,CAAD,EAAI;AACX,SAAKV,QAAL,GAAgBU,CAAC,CAACC,MAAF,CAASC,KAAzB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwB,KAAKd,QAA7B;AACH;;AAEDO,EAAAA,QAAQ,GAAG;AACP,SAAKR,KAAL,GAAa,EAAb;AACH;;AAEDS,EAAAA,WAAW,GAAG;AACV,SAAKR,QAAL,GAAgB,EAAhB;AACH;;AAEDS,EAAAA,YAAY,CAACM,GAAD,EAAMC,MAAN,EAAcC,IAAd,EAAoB;AAC5B,QAAG,KAAKlB,KAAL,IAAc,KAAKC,QAAL,KAAiB,EAAlC,EAAsC;AAClCL,MAAAA,OAAO,CAACoB,GAAD,EAAK,GAAL,EAAUC,MAAV,EAAkB;AACrBjB,QAAAA,KAAK,EAAE,KAAKA,KADS;AAErBC,QAAAA,QAAQ,EAAE,KAAKA;AAFM,OAAlB,CAAP,CAGGkB,IAHH,CAGQjB,QAAQ,IAAI;AAChB,YAAGA,QAAQ,CAACE,EAAZ,EAAgB;AAChB,eAAKF,QAAL,GAAgBA,QAAhB;AACA,eAAKC,KAAL,GAAaD,QAAQ,CAACE,EAAtB;AACA,eAAKA,EAAL,GAAUF,QAAQ,CAACkB,MAAnB;AACAvB,UAAAA,SAAS,CAACwB,cAAV;AACAP,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmB,KAAKZ,KAAxB;AACAmB,UAAAA,KAAK,CAAC,+BAA+B,KAAKlB,EAArC,CAAL;AACC,SAPD,MAOOkB,KAAK,CAAC,0CAAD,CAAL;AACV,OAZD,EAaCC,KAbD,CAaQC,GAAD,IAASV,OAAO,CAACC,GAAR,CAAYS,GAAZ,CAbhB;AAcH;;AACD,QAAGR,GAAG,IAAI,eAAV,EAA2B;AACvB;AACApB,MAAAA,OAAO,CAACoB,GAAD,EAAM,kBAAkB,KAAKb,KAA7B,EAAqCc,MAArC,CAAP;AACH;;AACD,SAAKT,QAAL;AACA,SAAKC,WAAL,GAtB4B,CAuB5B;AACA;AACH;;AAhEW;;AAmEhB,OAAO,MAAMgB,KAAK,GAAG,IAAI3B,SAAJ,EAAd","sourcesContent":["import {action, makeObservable, observable} from 'mobx';\nimport {Network} from \"../components/Network\"\nimport { StoreTodo } from './NoteStore';\n\nclass AuthStore {\n    constructor() {\n        this.email = '';\n        this.password = '';\n        this.response =  '';\n        this.token = '';\n        this.id = '';\n            makeObservable(this, {\n                response: observable,\n                email: observable,\n                password: observable,\n                token: observable,\n                id: observable,\n                setEmail: action.bound,\n                setPassword: action.bound,\n                delEmail: action.bound,\n                delPassword: action.bound,\n                sendAuthDate: action.bound,\n            })\n    }\n\n    setEmail(e) {\n        this.email = e.target.value\n        console.log(\"email\", this.email);\n    }\n\n    setPassword(e) {\n        this.password = e.target.value\n        console.log(\"password\", this.password);\n    }\n\n    delEmail() {\n        this.email = \"\"\n    }\n\n    delPassword() {\n        this.password = \"\"\n    }\n\n    sendAuthDate(url, method, page) {\n        if(this.email && this.password !=='') {\n            Network(url,' ', method, {\n                email: this.email,\n                password: this.password,\n            }).then(response => {\n                if(response.id) {\n                this.response = response;\n                this.token = response.id;\n                this.id = response.userId;\n                StoreTodo.setListOfItems();\n                console.log(\"id1\", this.token);\n                alert(\"Пользователь авторизован: \" + this.id);\n                } else alert(\"Ошибка, попробуте ввести повторно данные\");\n            })\n            .catch((err) => console.log(err))\n        }\n        if(url == \"Users/logout?\") {\n            /* id захардкожен, нужно запилить навигацию, тогда будет ок */ \n            Network(url, \"access_token=\" + this.token , method)\n        }\n        this.delEmail();\n        this.delPassword();\n        // else alert(\"Заполните все поля\");\n        // this.delPassword()\n    }\n}\n\nexport const store = new AuthStore();"]},"metadata":{},"sourceType":"module"}
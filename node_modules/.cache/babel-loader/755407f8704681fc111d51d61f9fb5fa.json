{"ast":null,"code":"import { action, makeObservable, observable } from 'mobx';\nimport { Network } from \"../components/Network\";\n\nclass AuthStore {\n  constructor() {\n    this.email = '';\n    this.password = '';\n    this.response = '';\n    makeObservable(this, {\n      response: observable,\n      email: observable,\n      password: observable,\n      setEmail: action.bound,\n      setPassword: action.bound,\n      delEmail: action.bound,\n      delPassword: action.bound,\n      sendAuthDate: action.bound\n    });\n  }\n\n  setEmail(e) {\n    this.email = e.target.value;\n    console.log(\"email\", this.email);\n  }\n\n  setPassword(e) {\n    this.password = e.target.value;\n    console.log(\"password\", this.password);\n  }\n\n  delEmail() {\n    this.email = \"\";\n  }\n\n  delPassword() {\n    this.password = \"\";\n  }\n\n  sendAuthDate(url, method, page) {\n    // if(this.email && this.password !=='') \n    console.log(url, method); //         Network(url,undefined, method, {\n    //           email: this.email,\n    //           password: this.password,\n    //         }).then(response => {\n    //             console.log(\"id1\", response);\n    //           if (response.id) {\n    //             this.response = response.id;\n    //             // alert(\"Пользователь авторизован:\" + this.response);\n    //             console.log(\"id2\", response);\n    //             // StoreToDo.id = this.response;\n    //             // Временно убираем проверку\n    //             // if (this.response !== '') navigation.navigate(page);\n    //           } \n    //         //   else\n    //         //   alert(\"Ошибка, возможно пользователь не существует\");\n    //         })\n    //         .catch((err) => console.log(err))\n    // // else alert(\"Заполните все поля\");\n    // this.delPassword()\n  }\n\n}\n\nexport const store = new AuthStore();","map":{"version":3,"sources":["/Users/dmitriyu/Documents/todoweb/src/source/stores/AuthStore.js"],"names":["action","makeObservable","observable","Network","AuthStore","constructor","email","password","response","setEmail","bound","setPassword","delEmail","delPassword","sendAuthDate","e","target","value","console","log","url","method","page","store"],"mappings":"AAAA,SAAQA,MAAR,EAAgBC,cAAhB,EAAgCC,UAAhC,QAAiD,MAAjD;AACA,SAAQC,OAAR,QAAsB,uBAAtB;;AAEA,MAAMC,SAAN,CAAgB;AACZC,EAAAA,WAAW,GAAG;AACV,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,QAAL,GAAiB,EAAjB;AACIP,IAAAA,cAAc,CAAC,IAAD,EAAO;AACjBO,MAAAA,QAAQ,EAAEN,UADO;AAEjBI,MAAAA,KAAK,EAAEJ,UAFU;AAGjBK,MAAAA,QAAQ,EAAEL,UAHO;AAIjBO,MAAAA,QAAQ,EAAET,MAAM,CAACU,KAJA;AAKjBC,MAAAA,WAAW,EAAEX,MAAM,CAACU,KALH;AAMjBE,MAAAA,QAAQ,EAAEZ,MAAM,CAACU,KANA;AAOjBG,MAAAA,WAAW,EAAEb,MAAM,CAACU,KAPH;AAQjBI,MAAAA,YAAY,EAAEd,MAAM,CAACU;AARJ,KAAP,CAAd;AAUP;;AAEDD,EAAAA,QAAQ,CAACM,CAAD,EAAI;AACR,SAAKT,KAAL,GAAaS,CAAC,CAACC,MAAF,CAASC,KAAtB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqB,KAAKb,KAA1B;AACH;;AAEDK,EAAAA,WAAW,CAACI,CAAD,EAAI;AACX,SAAKR,QAAL,GAAgBQ,CAAC,CAACC,MAAF,CAASC,KAAzB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwB,KAAKZ,QAA7B;AACH;;AAEDK,EAAAA,QAAQ,GAAG;AACP,SAAKN,KAAL,GAAa,EAAb;AACH;;AAEDO,EAAAA,WAAW,GAAG;AACV,SAAKN,QAAL,GAAgB,EAAhB;AACH;;AAEDO,EAAAA,YAAY,CAACM,GAAD,EAAMC,MAAN,EAAcC,IAAd,EAAoB;AAC5B;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ,EAAiBC,MAAjB,EAF4B,CAI5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACK;;AA5DG;;AA+DhB,OAAO,MAAME,KAAK,GAAG,IAAInB,SAAJ,EAAd","sourcesContent":["import {action, makeObservable, observable} from 'mobx';\nimport {Network} from \"../components/Network\"\n\nclass AuthStore {\n    constructor() {\n        this.email = '';\n        this.password = '';\n        this.response =  '';\n            makeObservable(this, {\n                response: observable,\n                email: observable,\n                password: observable,\n                setEmail: action.bound,\n                setPassword: action.bound,\n                delEmail: action.bound,\n                delPassword: action.bound,\n                sendAuthDate: action.bound,\n            })\n    }\n\n    setEmail(e) {\n        this.email = e.target.value\n        console.log(\"email\", this.email);\n    }\n\n    setPassword(e) {\n        this.password = e.target.value\n        console.log(\"password\", this.password);\n    }\n\n    delEmail() {\n        this.email = \"\"\n    }\n\n    delPassword() {\n        this.password = \"\"\n    }\n\n    sendAuthDate(url, method, page) {\n        // if(this.email && this.password !=='') \n        console.log(url, method)\n\n        //         Network(url,undefined, method, {\n        //           email: this.email,\n        //           password: this.password,\n        //         }).then(response => {\n        //             console.log(\"id1\", response);\n        //           if (response.id) {\n        //             this.response = response.id;\n        //             // alert(\"Пользователь авторизован:\" + this.response);\n        //             console.log(\"id2\", response);\n        //             // StoreToDo.id = this.response;\n        //             // Временно убираем проверку\n        //             // if (this.response !== '') navigation.navigate(page);\n        //           } \n        //         //   else\n        //         //   alert(\"Ошибка, возможно пользователь не существует\");\n        //         })\n        //         .catch((err) => console.log(err))\n    \n              \n        // // else alert(\"Заполните все поля\");\n        // this.delPassword()\n            }\n}\n\nexport const store = new AuthStore();"]},"metadata":{},"sourceType":"module"}